/* Generated By:JavaCC: Do not edit this line. TriangleParser.java */
import java.io.*;
public class TriangleParser implements TriangleParserConstants {
    public static void main(String args[]) throws ParseException {
         TriangleParser parser = new TriangleParser(System.in);
         parser.Input();
    }

    // Sonucu ekrana yazdirmak icin yardimci metot.
    public static void printResult(String result) {
         System.out.println(result);
    }

    // SSS durumu: Üc kenar verildiginde acilari hesaplama.
    public static void computeSSS(double a, double b, double c) {
         double A = Math.toDegrees(Math.acos((b*b + c*c - a*a) / (2 * b * c)));
         double B = Math.toDegrees(Math.acos((a*a + c*c - b*b) / (2 * a * c)));
         double C = 180.0 - A - B;
         printResult("SSS: Verilen kenarlar a=" + a + ", b=" + b + ", c=" + c +
                     " icin acilar: A=" + A + " derece, B=" + B + " derece, C=" + C + " derece");
    }

    // SAS durumu: İki kenar ve aradaki aci verildiginde, ücüncü kenari ve diger acilari hesaplama.
    // Girdi formati: side1, includedAngle, side2
    public static void computeSAS(double a, double angleC, double b) {
         double C = angleC; // Verilen aci, derece cinsinden.
         double radC = Math.toRadians(C);
         double c = Math.sqrt(a*a + b*b - 2*a*b*Math.cos(radC));
         double A = Math.toDegrees(Math.asin(a * Math.sin(radC) / c));
         double B = 180.0 - C - A;
         printResult("SAS: Verilen kenarlar a=" + a + ", b=" + b + " ve aradaki aci C=" + C +
                     " derece icin; hesaplanan kenar c=" + c +
                     " ve acilar: A=" + A + " derece, B=" + B + " derece, C=" + C + " derece");
    }

    // ASA durumu: İki aci ve aradaki kenar verildiginde, ücüncü aciyi ve diger kenarlari hesaplama.
    // Girdi formati: angleA, side (aradaki kenar), angleC
    public static void computeASA(double angleA, double sideB, double angleC) {
         double A = angleA;
         double C = angleC;
         double B = 180.0 - A - C;
         double a = sideB * Math.sin(Math.toRadians(A)) / Math.sin(Math.toRadians(B));
         double c = sideB * Math.sin(Math.toRadians(C)) / Math.sin(Math.toRadians(B));
         printResult("ASA: Verilen aci A=" + A + " derece, C=" + C +
                     " derece ve aradaki kenar b=" + sideB +
                     " icin; hesaplanan aci B=" + B +
                     " derece ve kenarlar: a=" + a + ", b=" + sideB + ", c=" + c);
    }

    // AAS durumu: İki aci ve, bu acilardan birine karsilik gelen kenar verildiginde diger aci ve kenarlari hesaplama.
    // Girdi formati: angleA, angleB, sideA (sideA, angleA'ya karsilik gelir)
    public static void computeAAS(double angleA, double angleB, double sideA) {
         double A = angleA;
         double B = angleB;
         double C = 180.0 - A - B;
         double a = sideA;
         double b = a * Math.sin(Math.toRadians(B)) / Math.sin(Math.toRadians(A));
         double c = a * Math.sin(Math.toRadians(C)) / Math.sin(Math.toRadians(A));
         printResult("AAS: Verilen aci A=" + A + " derece, B=" + B +
                     " derece ve karsi kenar a=" + a +
                     " icin; hesaplanan aci C=" + C +
                     " derece ve kenarlar: a=" + a + ", b=" + b + ", c=" + c);
    }

  static final public void Input() throws ParseException {
    Triangle();
    jj_consume_token(0);
  }

  static final public void Triangle() throws ParseException {
   Token typeToken;
   Token n1, n2, n3;
    jj_consume_token(TRIANGLE);
    typeToken = jj_consume_token(TYPE);
    jj_consume_token(LPAREN);
    n1 = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    n2 = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    n3 = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
         String type = typeToken.image;
         double param1 = Double.parseDouble(n1.image);
         double param2 = Double.parseDouble(n2.image);
         double param3 = Double.parseDouble(n3.image);
         if(type.equals("SSS")) {
             computeSSS(param1, param2, param3);
         } else if(type.equals("SAS")) {
             computeSAS(param1, param2, param3);
         } else if(type.equals("ASA")) {
             computeASA(param1, param2, param3);
         } else if(type.equals("AAS")) {
             computeAAS(param1, param2, param3);
         } else {
             printResult("Desteklenmeyen \u00c3\u00bccgen tipi: " + type);
         }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TriangleParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }

  /** Constructor with InputStream. */
  public TriangleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TriangleParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TriangleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TriangleParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TriangleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TriangleParser(TriangleParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TriangleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[11];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 11; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
